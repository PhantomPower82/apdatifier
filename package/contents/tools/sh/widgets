#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2024 Evgeny Kazantsev <exequtic@gmail.com>
# SPDX-License-Identifier: MIT

source "$(dirname "$0")/utils"
source "$(dirname "$0")/widgets-id"

downloadXML() {
    XML=$(mktemp)
    echo '<?xml version="1.0" encoding="UTF-8"?><data>' > "$XML"

    local page=0
    local pagesize=100
    while true; do
        tempXML=$(mktemp)
        api_url="https://api.opendesktop.org/ocs/v1/content/data?categories=705&sort=new&page=$page&pagesize=$pagesize"
        curl -m 30 -s -o "$tempXML" --request GET --url "$api_url"

        onError() {
            case "$1" in
                200) [[ $2 ]] && echo $1 || printError "$WIDGETS_API_ERR" ;;
                999) [[ $2 ]] && echo $1 || printError "$WIDGETS_CHECK" ;;
            esac

            rm -f "$XML" "$tempXML"
            exit
        }

        if [ -s "$tempXML" ]; then
            totalitems=$(xmlstarlet sel -t -m "//ocs/meta/totalitems" -v . -n "$tempXML")
            statuscode=$(xmlstarlet sel -t -m "//ocs/meta/statuscode" -v . -n $tempXML)
            [[ $statuscode = 200 ]] && onError 200 $1
            [[ $statuscode != 100 ]] && onError 999 $1
        else
            onError 999 $1
        fi

        xmlstarlet sel -t -m "//content[@details='summary']" -c "." "$tempXML" >> "$XML"
        rm $tempXML

        items=$(((page + 1) * pagesize))
        if [[ $totalitems > $items ]]; then
            ((page++))
        else
            echo '</data>' >> "$XML"
            break
        fi
    done
}

getWidgets() {
    plasmoids=$(find "$HOME/.local/share/plasma/plasmoids" -mindepth 1 -maxdepth 1 -type d -printf "%f\n")
    if [ -z "$plasmoids" ]; then
        exit
    else
        while IFS= read -r line; do lines+=("$line"); done <<< "$plasmoids"
    fi
}

getWidgetInfo() {
    local dir="$HOME/.local/share/plasma/plasmoids/$plasmoid"
    local json="$dir/metadata.json"
    [ -s "$json" ] || return 1

    jq . $json >/dev/null 2>&1 || return 1
    if ! jq -e '.KPackageStructure == "Plasma/Applet"' "$json" >/dev/null 2>&1; then
        jq '. + { "KPackageStructure": "Plasma/Applet" }' $json > $dir/tmp.json && mv $dir/tmp.json $json
    fi

    local originName=$(jq -r '.KPlugin.Name' $json)
    name=$(echo "$originName" | sed 's/ /-/g; s/.*/\L&/')

    contentId=$(xmlstarlet sel -t -m "//name[text()='$originName']/.." -v "id" -n $XML)
    [ -z "$contentId" ] && contentId="$(getId "$plasmoid")"
    if [ -z "$contentId" ]; then
        local knsregistry="$HOME/.local/share/knewstuff3/plasmoids.knsregistry"
        [ -s "$knsregistry" ] && contentId=$(xmlstarlet sel -t -m "//installedfile[contains(text(), 'plasma/plasmoids/$plasmoid')]/.." -v "id" -n $knsregistry)
    fi
    [ -z "$contentId" ] && return 1

    currentVer=$(clearVer "$(jq -r '.KPlugin.Version' "$json")")
    latestVer=$(clearVer "$(xmlstarlet sel -t -m "//id[text()='$contentId']/.." -v "version" -n "$XML")")
    [ -z "$currentVer" ] || [ -z "$latestVer" ] && return 1
    compareVer "$currentVer" "$latestVer"
    [[ $? != 2 ]] && return 1

    description=$(jq -r '.KPlugin.Description' $json | tr -d '\n')
    [ -z "$description" ] || [ "$description" = "null" ] && description="$WIDGETS_NODESC"

    author=$(jq -r '.KPlugin.Authors[].Name' $json | paste -sd "," - | sed 's/,/, /g')
    [ -z "$author" ] || [ "$author" = "null" ] && author="-"

    icon=$(jq -r '.KPlugin.Icon' $json)
    if [ -z "$icon" ]; then
        icon="start-here-kde"
    else
        ! find /usr/share/icons "$HOME/.local/share/icons" -name "$icon.svg" 2>/dev/null | grep -q . && icon="start-here-kde"
    fi

    url="https://store.kde.org/p/$contentId"
    repo="kde-store"

    return 0
}

getLink() {
    local signed=()
    local files=0

    while read -r download_version; do
        ((files++))
        if [[ "$latestVer" == "$(clearVer "$(xmlstarlet sel -t -v "//content[id='$contentId']/$download_version" "$XML")")" ]]; then
            signed+=("${download_version#download_version}")
        fi
    done < <(xmlstarlet sel -t -m "//content[id='$contentId']/*" -v "name()" -n "$XML" | grep -o 'download_version[0-9]\+')

    if [[ $files -eq 1 || ${#signed[@]} -eq 1 ]]; then
        link=$(xmlstarlet sel -t -v "//content[id='$contentId']/downloadlink${signed[0]:-1}" "$XML")
        return 0
    else
        if [[ $files -eq 0 ]]; then
            printError "$WIDGETS_ERR_NOFILES. $UPGRADE_SKIPPED"
        elif [[ ${#signed[@]} -eq 0 ]]; then
            printError "$files $WIDGETS_ERR_NOTAGGED $latestVer. $UPGRADE_SKIPPED"
        elif [[ ${#signed[@]} > 1 ]]; then
            printError "$files $WIDGETS_ERR_TAGGED $latestVer. $UPGRADE_SKIPPED"
        fi
        return 1
    fi
}

checkWidgets() {
    for cmd in curl jq xmlstarlet; do command -v "$cmd" >/dev/null || { echo 127; exit; }; done

    declare -a plasmoid lines
    getWidgets
    downloadXML notTerminal

    first=true; out="["
    for plasmoid in "${lines[@]}"; do
        getWidgetInfo; [[ $? -ne 0 ]] && continue
        compareVer "$currentVer" "$latestVer"
        if [[ $? = 2 ]]; then
            [ "$first" = false ] && out+=","
            out+="{\"NM\": \"${name}\","
            out+="\"RE\": \"${repo}\","
            out+="\"CN\": \"${contentId}\","
            out+="\"IN\": \"${icon}\","
            out+="\"DE\": \"${description}\","
            out+="\"AU\": \"${author}\","
            out+="\"VO\": \"${currentVer}\","
            out+="\"VN\": \"${latestVer}\","
            out+="\"LN\": \"${url}\"}"
            first=false
        fi
    done

    rm $XML
    echo -e "$out]"
    # echo "$out]" | jq .
}

downloadWidget() {
    tempFile="$tempDir/$(basename "${link}")"
    tput sc; curl -s -o $tempFile --request GET --location "$link" 2>/dev/null &
    spinner $! "$WIDGETS_DOWNLOADING $name ($latestVer)"; tput rc; tput ed

    if [ -s "$tempFile" ]; then
        printDone "$WIDGETS_DOWNLOADING $name ($latestVer)"
    else
        printError "$WIDGETS_DOWNLOADING $name ($latestVer)"; return 1
    fi

    case "$tempFile" in
         *.zip | *.plasmoid) unzip -q "$tempFile" -d "$tempDir/unpacked";;
        *.xz | *.gz | *.tar) tar -xf "$tempFile" -C "$tempDir/unpacked";;
                          *) printError "$WIDGETS_EXT_ERR"; return 1;;
    esac

    metadata_path=$(find "$tempDir/unpacked" -name "metadata.json")
    [ -z "$metadata_path" ] && { printError "$WIDGETS_JSON_ERR"; return 1; }

    unpacked=$(dirname "$metadata_path"); cd "$unpacked"

    jq . metadata.json >/dev/null 2>&1 || { printError "$WIDGETS_JSON_ERR2"; return 1; }
    if ! jq -e '.KPackageStructure == "Plasma/Applet"' metadata.json >/dev/null 2>&1; then
        jq '. + { "KPackageStructure": "Plasma/Applet" }' metadata.json > tmp.json && mv tmp.json metadata.json
    fi

    jq --arg new_value "$latestVer" '.KPlugin.Version = $new_value' metadata.json > tmp.json && mv tmp.json metadata.json

    kpackagetool6 -t Plasma/Applet -u . 2>/dev/null

    sleep 1

    echo

    return 0
}

upgradeAllWidgets() {
    dependencies "curl jq xmlstarlet unzip tar"

    declare -a plasmoid lines
    getWidgets

    tput sc; downloadXML &
    spinner $! "$WIDGETS_CHECK"
    tput rc; tput ed; printDone "$WIDGETS_CHECK"

    hasUpdates="false"
    for plasmoid in "${lines[@]}"; do
        getWidgetInfo; [[ $? -ne 0 ]] && continue
        compareVer "$currentVer" "$latestVer"
        if [[ $? = 2 ]]; then
            getLink; [[ $? -ne 0 ]] && continue
            tempDir=$(mktemp -d)
            mkdir $tempDir/unpacked
            downloadWidget; [[ $? -ne 0 ]] && continue
            hasUpdates="true"
        fi
    done

    rm $XML

    [[ "$hasUpdates" = true ]] && restartPlasmashell
}

upgradeWidget() {
    [ -n "$1" ] && contentId="$1" || exit
    [ -n "$2" ] && name="$2" || exit

    dependencies "curl jq xmlstarlet unzip tar"

    tempDir=$(mktemp -d)
    mkdir $tempDir/unpacked
    XML="$tempDir/data.xml"
    tput sc; curl -m 30 -s -o $XML --request GET --url "https://api.opendesktop.org/ocs/v1/content/data/$contentId" 2>/dev/null &
    spinner $! "$WIDGETS_FETCHING"; tput rc; tput ed

    onError() {
        rm -rf "$tempDir"
        exit
    }

    if [ -s "$XML" ]; then
        statuscode=$(xmlstarlet sel -t -m "//ocs/meta/statuscode" -v . -n $XML)
        [[ $statuscode = 200 ]] && { printError "$WIDGETS_API_ERR"; onError; }
        [[ $statuscode != 100 ]] && { printError "$WIDGETS_FETCHING"; onError; }
        printDone "$WIDGETS_FETCHING"
    else
        printError "$WIDGETS_FETCHING"; onError
    fi

    latestVer=$(clearVer "$(xmlstarlet sel -t -v "//content[id='$contentId']/version" "$XML")")
    
    getLink; [[ $? -ne 0 ]] && exit
    downloadWidget; [[ $? -ne 0 ]] && exit
    restartPlasmashell
}

case "$1" in
                       "check") checkWidgets;;
                     "upgrade") shift; upgradeWidget $1 $2;;
                  "upgradeAll") upgradeAllWidgets;;
                             *) exit;;
esac
