#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2024 Evgeny Kazantsev <exequtic@gmail.com>
# SPDX-License-Identifier: MIT

source "$(dirname "$0")/utils"
source "$(dirname "$0")/widgets-id"

cleanup() {
    [ -d $tempDir ] && rm -rf $tempDir
}

fetchData() {
    echo '<?xml version="1.0" encoding="UTF-8"?><data>' > "$XML"

    local page=0
    local pagesize=100

    while true; do
        pageXML=$(mktemp "$tempDir/XXXXXX.xml")
        api_url="https://api.opendesktop.org/ocs/v1/content/data?categories=705&sort=new&page=$page&pagesize=$pagesize"

        curl -m 30 -s -o "$pageXML" --request GET --url "$api_url"

        [ ! -s "$pageXML" ] && return 1

        totalitems=$(xmlstarlet sel -t -m "//ocs/meta/totalitems" -v . -n "$pageXML")
        statuscode=$(xmlstarlet sel -t -m "//ocs/meta/statuscode" -v . -n $pageXML)

        case $statuscode in
            100)
                xmlstarlet sel -t -m "//content[@details='summary']" -c "." "$pageXML" >> "$XML"

                items=$(((page + 1) * pagesize))
                if [[ $totalitems > $items ]]; then
                    ((page++))
                else
                    echo '</data>' >> "$XML"
                    break
                fi
            ;;

            200) return 2 ;;
              *) return 3 ;;
        esac
    done

    return 0
}

getWidgets() {
    plasmoids=$(find "$HOME/.local/share/plasma/plasmoids" -mindepth 1 -maxdepth 1 -type d -printf "%f\n")
    if [ -z "$plasmoids" ]; then
        exit
    else
        while IFS= read -r line; do lines+=("$line"); done <<< "$plasmoids"
    fi
}

getWidgetInfo() {
    local dir="$HOME/.local/share/plasma/plasmoids/$plasmoid"
    local json="$dir/metadata.json"
    [ -s "$json" ] || return 1

    jq . $json >/dev/null 2>&1 || return 2
    if ! jq -e '.KPackageStructure == "Plasma/Applet"' "$json" >/dev/null 2>&1; then
        jq '. + { "KPackageStructure": "Plasma/Applet" }' $json > $dir/tmp.json && mv $dir/tmp.json $json
    fi

    local originName=$(jq -r '.KPlugin.Name' $json)
    name=$(echo "$originName" | sed 's/ /-/g; s/.*/\L&/')

    contentId=$(xmlstarlet sel -t -m "//name[text()='$originName']/.." -v "id" -n $XML)
    [ -z "$contentId" ] && contentId="$(getId "$plasmoid")"
    if [ -z "$contentId" ]; then
        local knsregistry="$HOME/.local/share/knewstuff3/plasmoids.knsregistry"
        [ -s "$knsregistry" ] && contentId=$(xmlstarlet sel -t -m "//installedfile[contains(text(), 'plasma/plasmoids/$plasmoid')]/.." -v "id" -n $knsregistry)
    fi
    [ -z "$contentId" ] && return 3

    currentVer=$(clearVer "$(jq -r '.KPlugin.Version' "$json")")
    latestVer=$(clearVer "$(xmlstarlet sel -t -m "//id[text()='$contentId']/.." -v "version" -n "$XML")")
    [ -z "$currentVer" ] || [ -z "$latestVer" ] && return 4
    compareVer "$currentVer" "$latestVer"
    [[ $? != 2 ]] && return 5

    description=$(jq -r '.KPlugin.Description' $json | tr -d '\n')
    [ -z "$description" ] || [ "$description" = "null" ] && description="$WIDGETS_NODESC"

    author=$(jq -r '.KPlugin.Authors[].Name' $json | paste -sd "," - | sed 's/,/, /g')
    [ -z "$author" ] || [ "$author" = "null" ] && author="-"

    icon=$(jq -r '.KPlugin.Icon' $json)
    if [ -z "$icon" ]; then
        icon="start-here-kde"
    else
        local iconTheme=$(sed -n '/^\[Icons\]/,/^\[/s/^Theme=//p' $HOME/.config/kdeglobals)
        local themeDir1="/usr/share/icons/$iconTheme/"
        local themeDir2="$HOME/.local/share/icons/$iconTheme/"
        local themeDir3="$HOME/.icons/$iconTheme/"

        ! find -L "$themeDir1" "$themeDir2" "$themeDir3" \
            -type f -name "$icon.svg" -print -quit 2>/dev/null | grep -q . \
                && icon="start-here-kde"
    fi

    url="https://store.kde.org/p/$contentId"
    repo="kde-store"

    return 0
}

getLink() {
    local signed=()
    local files=0

    while read -r download_version; do
        ((files++))
        if [[ "$latestVer" == "$(clearVer "$(xmlstarlet sel -t -v "//content[id='$contentId']/$download_version" "$XML")")" ]]; then
            signed+=("${download_version#download_version}")
        fi
    done < <(xmlstarlet sel -t -m "//content[id='$contentId']/*" -v "name()" -n "$XML" | grep -o 'download_version[0-9]\+')

    if [[ $files -eq 1 || ${#signed[@]} -eq 1 ]]; then
        echo $(xmlstarlet sel -t -v "//content[id='$contentId']/downloadlink${signed[0]:-1}" "$XML") > $tempDir/link
        return 0
    else
        [[ $files -eq 0 ]] && return 1
        [[ ${#signed[@]} -eq 0 ]] && return 2
        (( ${#signed[@]} > 1 )) && return 3
    fi
}

makeList() {
    local out=""
    for plasmoid in "${lines[@]}"; do
        getWidgetInfo
        [[ $? -ne 0 ]] && continue
        out+="{\"NM\": \"${name}\","
        out+="\"RE\": \"${repo}\","
        out+="\"CN\": \"${contentId}\","
        out+="\"IN\": \"${icon}\","
        out+="\"DE\": \"${description}\","
        out+="\"AU\": \"${author}\","
        out+="\"VO\": \"${currentVer}\","
        out+="\"VN\": \"${latestVer}\","
        out+="\"LN\": \"${url}\"}",
    done

    echo -e "[${out%,}]" > $updatesList
}

checkWidgets() {
    for cmd in curl jq xmlstarlet; do
        command -v "$cmd" >/dev/null || { echo 127; exit; }
    done

    mkdir $tempDir
    XML="$tempDir/api.opendesktop.xml"
    updatesList="$tempDir/update.list.json"

    trap cleanup EXIT

    declare -a plasmoid lines

    getWidgets
    fetchData

    case $? in
        1) echo 1; exit ;;
        2) echo 2; exit ;;
        3) echo 3; exit ;;
    esac

    makeList

    jq . $updatesList
}

downloadWidget() {
    mkdir -p $tempDir/$name/unpacked
    link=$(cat $tempDir/link)
    package="$tempDir/$name/$(basename "${link}")"

    curl -s -o $package --request GET --location "$link" 2>/dev/null

    [ ! -s "$package" ] && return 1
    
    case "$package" in
         *.zip | *.plasmoid) unzip -q "$package" -d "$tempDir/$name/unpacked" ;;
        *.xz | *.gz | *.tar) tar -xf "$package" -C "$tempDir/$name/unpacked" ;;
                          *) return 2 ;;
    esac

    metadata_path=$(find "$tempDir/$name/unpacked" -name "metadata.json")
    [ -z "$metadata_path" ] && return 3

    cd $(dirname "$metadata_path")

    jq . metadata.json >/dev/null 2>&1 || return 4

    if ! jq -e '.KPackageStructure == "Plasma/Applet"' metadata.json >/dev/null 2>&1; then
        jq '. + { "KPackageStructure": "Plasma/Applet" }' metadata.json > tmp.json && mv tmp.json metadata.json
    fi

    jq --arg new_value "$latestVer" '.KPlugin.Version = $new_value' metadata.json > tmp.json && mv tmp.json metadata.json

    return 0
}

upgradeAllWidgets() {
    dependencies "curl jq xmlstarlet unzip tar"

    mkdir $tempDir
    XML="$tempDir/api.opendesktop.xml"
    updatesList="$tempDir/update.list.json"

    trap cleanup EXIT

    declare -a plasmoid lines

    getWidgets
    fetchData & printWhile $! "$WIDGETS_FETCH"
    [[ $exitCode -ne 0 ]] && exit

    makeList & printWhile $! "$WIDGETS_CHECK"

    updated="false"
    if [[ -s "$updatesList" ]] && jq -e '(. | length) > 0' "$updatesList" > /dev/null 2>&1; then
        echo
        jq -c '.[]' "$updatesList" | while read -r widget; do
            echo -e "$(colorize white bold $(echo "$widget" | jq -r '.NM')) \t \
                     $(colorize red bold $(echo "$widget" | jq -r '.VO')) \t \
                     $(colorize white "->") \t \
                     $(colorize green bold $(echo "$widget" | jq -r '.VN'))"
        done | column -t
        echo

        if [[ $widgetConfirmation = true ]]; then
            while true; do
                printQuestion "$WIDGETS_PROCEED"; read -r answer
                case "$answer" in
                    [Yy]*) echo; break;;
                 [Nn]*|"") return 0;;
                        *)  ;;
                esac
            done
        fi

        jq -c '.[]' "$updatesList" | while read -r widget; do
            name=$(echo "$widget" | jq -r '.NM')
            contentId=$(echo "$widget" | jq -r '.CN')
            latestVer=$(echo "$widget" | jq -r '.VN')

            echo "$(colorize blue bold "$ICO_EXEC $name ($latestVer)")"

            getLink & printWhile $! "$WIDGETS_LINK"
            [[ $exitCode -ne 0 ]] && { echo; continue; }

            downloadWidget & printWhile $! "$WIDGETS_DOWNLOADING"
            [[ $exitCode -ne 0 ]] && { echo; continue; }

            kpackagetool6 -t Plasma/Applet -u $(dirname $(find $tempDir/$name -name "metadata.json")) 2>/dev/null
            sleep 1
            echo

            updated="true"
        done

        [[ updated = true ]] && restartPlasmashell
    else
        printDone "$MNG_DONE"
    fi
}

upgradeWidget() {
    [ -n "$1" ] && contentId="$1" || exit
    [ -n "$2" ] && name="$2" || exit

    dependencies "curl jq xmlstarlet unzip tar"

    mkdir -p $tempDir/$name/unpacked
    XML="$tempDir/$name/api.opendesktop.xml"

    trap cleanup EXIT

    {
        curl -m 30 -s -o $XML --request GET --url "https://api.opendesktop.org/ocs/v1/content/data/$contentId" 2>/dev/null
        if [ -s "$XML" ]; then
            statuscode=$(xmlstarlet sel -t -m "//ocs/meta/statuscode" -v . -n $XML)
            case $statuscode in
                100) return 0 ;;
                200) return 2 ;;
                  *) return 3 ;;
            esac
        else
            return 1
        fi
    } & printWhile $! "$WIDGETS_FETCH"
    [[ $exitCode -ne 0 ]] && exit

    latestVer=$(clearVer "$(xmlstarlet sel -t -v "//content[id='$contentId']/version" "$XML")")
    
    getLink & printWhile $! "$WIDGETS_LINK"
    [[ $exitCode -ne 0 ]] && exit

    downloadWidget & printWhile $! "$WIDGETS_DOWNLOADING"
    [[ $exitCode -ne 0 ]] && exit

    kpackagetool6 -t Plasma/Applet -u $(dirname $(find $tempDir/$name -name "metadata.json")) 2>/dev/null
    sleep 1
    echo

    restartPlasmashell
}

case "$1" in
         "check") checkWidgets;;
       "upgrade") shift; upgradeWidget $1 $2;;
    "upgradeAll") upgradeAllWidgets;;
               *) exit;;
esac
